generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  username    String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userDetails     UserDetails?
  cart            Cart[]
  orders          Order[]
  payments        Payment[]
  paymentSessions PaymentSession[]
  
  @@map("users")
}

model UserDetails {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  pincode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_details")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products Product[]
  
  @@map("categories")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique  
  description String?
  price       Float
  stock       Int
  categoryId  String   @db.ObjectId
  images      String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category Category @relation(fields: [categoryId], references: [id])
  
  productDetails ProductDetails?
  cartItems      Cart[]
  orderItems     OrderItem[]
  
  @@map("products")
}

model ProductDetails {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @unique @db.ObjectId
  weight      String?
  dimensions  String?
  material    String?
  warranty    String?
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_details")
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart")
}

// NEW: PaymentSession model for pay-first flow
model PaymentSession {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  transactionId         String   @unique // PhonePe merchant transaction ID
  userId                String   @db.ObjectId
  amount                Float
  cartItemIds           String[] // Array of cart item IDs
  shippingAddress       Json     // Shipping address object
  status                PaymentSessionStatus @default(PENDING)
  paymentUrl            String?  // PhonePe payment URL
  phonePeTransactionId  String?  // PhonePe's internal transaction ID
  phonePeResponse       Json?    // Full PhonePe initiation response
  callbackData          Json?    // PhonePe callback data
  statusCheckResponse   Json?    // Status check response
  orderId               String?  @db.ObjectId // Created order ID after successful payment
  expiresAt             DateTime // Payment session expiry (15 minutes)
  createdAt             DateTime @default(now())
  completedAt           DateTime?
  
  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id])
  
  @@map("payment_sessions")
}

// Updated Order model - orders are only created after successful payment
model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  totalAmount     Float
  paymentStatus   PaymentStatus @default(PAID) // Always PAID since order created after payment
  deliveryStatus  DeliveryStatus @default(CONFIRMED) // Start with CONFIRMED since payment is done
  paymentMethod   PaymentMethod @default(ONLINE) // Only ONLINE payments now
  paymentId       String?       // PhonePe transaction ID
  shippingAddress Json
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User            @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]
  paymentSessions PaymentSession[] // Link to payment sessions
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Updated Payment model for PhonePe integration
model Payment {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId               String        @db.ObjectId
  userId                String        @db.ObjectId
  transactionId         String        @unique // PhonePe transaction ID
  merchantTransactionId String        // Our internal transaction ID
  amount                Float
  status                PaymentTransactionStatus @default(PENDING)
  paymentMethod         String        @default("PHONEPE")
  paymentUrl            String?
  callbackUrl           String?
  mobileNumber          String?
  gatewayResponse       Json?         // Store PhonePe response data
  completedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])
  
  @@map("payments")
}

// Updated enums
enum PaymentSessionStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
}

// Updated to remove COD since we only support online payments now
enum PaymentMethod {
  ONLINE
}

enum PaymentTransactionStatus {
  PENDING
  SUCCESS
  FAILURE
}